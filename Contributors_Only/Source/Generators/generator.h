#ifndef DF_GENERATOR_H
#define DF_GENERATOR_H

#include <limits>
#include <cmath>
#include <iostream>

#include "../types.h"

namespace DiceForge
{
    /* DiceForge::Generator<T> - A generic class for RNGs
    T = datatype of random number generated (depends on RNG) */
    template <typename T>
    class Generator
    {
    /*** Note: These are the only functions to be called by the end-user, no need to be re-implemented for each RNG ***/
    public:
        /* next() [Integer] - Returns a random integer generated by the RNG*/
        T next()
        {
            return generate(); 
        };
        /* next_unit() [Real] - Returns a random real between 0 (inclusive) and 1 (exclusive) */
        real_t next_unit()
        {
            real_t x = 1.0;
            while (x == 1.0) {
                x = generate() / real_t(std::numeric_limits<T>().max());
            }
            return x;
        }
        /* next_in_range(min, max) [Integer] - Returns a random integer in the specified range
        * min = minimum value of random number (inclusive)
        * max = maximum value of random number (inclusive) */
        T next_in_range(T min, T max)
        {
            return (T)floor(next_unit() * (max - min + 1)) + min;
        };

        /* next_in_crange(min, max) [Real] - Returns a random real number in the specified range
        * min = minimum value of random number (inclusive)
        * max = maximum value of random number (exclusive) */
        real_t next_in_crange(real_t min, real_t max)
        {
            real_t x = (real_t)max;
            while (x == max) {
                x = (max - min) * next_unit() + min;
            }
            return x;
        };
        /* set_seed(Number seed) [Function] - Initializes the RNG with specified seed */
        void reset_seed(T seed)
        { 
            reseed(seed);
        }    
    /*** Note: These are the only functions to be implemented by RNG ***/
    private:
        /* Should return a random number using the RNG's algorithm */
        virtual T generate() = 0;        
        /* Should initialize the seed for the RNG */
        virtual void reseed(T seed) = 0;        
    };
}

#endif